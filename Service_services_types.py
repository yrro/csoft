################################################## 
# Service_services_types.py 
# generated by ZSI.generate.wsdl2python
##################################################


import ZSI
import ZSI.TCcompound
from ZSI.schema import LocalElementDeclaration, ElementDeclaration, TypeDefinition, GTD, GED
from ZSI.generate.pyclass import pyclass_type

##############################
# targetNamespace
# http://www.csoft.co.uk/dtd/sendsms5.xsd
##############################

class ns0:
    targetNamespace = "http://www.csoft.co.uk/dtd/sendsms5.xsd"

    class DataFormat_Def(ZSI.TC.String, TypeDefinition):
        schema = "http://www.csoft.co.uk/dtd/sendsms5.xsd"
        type = (schema, "DataFormat")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class action_Def(ZSI.TC.String, TypeDefinition):
        schema = "http://www.csoft.co.uk/dtd/sendsms5.xsd"
        type = (schema, "action")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class DeliveryOption_Def(ZSI.TC.String, TypeDefinition):
        schema = "http://www.csoft.co.uk/dtd/sendsms5.xsd"
        type = (schema, "DeliveryOption")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class Reserved_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://www.csoft.co.uk/dtd/sendsms5.xsd"
        type = (schema, "Reserved")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.Reserved_Def.schema
            TClist = [ZSI.TC.String(pname="Field1", aname="_Field1", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="Field2", aname="_Field2", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="Field3", aname="_Field3", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="Field4", aname="_Field4", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._Field1 = None
                    self._Field2 = None
                    self._Field3 = None
                    self._Field4 = None
                    return
            Holder.__name__ = "Reserved_Holder"
            self.pyclass = Holder

    class SmartMessage_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://www.csoft.co.uk/dtd/sendsms5.xsd"
        type = (schema, "SmartMessage")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.SmartMessage_Def.schema
            TClist = [ZSI.TCnumbers.IpositiveInteger(pname="LibraryNumber", aname="_LibraryNumber", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.HexBinaryString(pname="Data", aname="_Data", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), GTD("http://www.csoft.co.uk/dtd/sendsms5.xsd","DataFormat",lazy=False)(pname="Format", aname="_Format", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._LibraryNumber = None
                    self._Data = None
                    self._Format = None
                    return
            Holder.__name__ = "SmartMessage_Holder"
            self.pyclass = Holder

    class SMS_SUBMIT_PDU_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://www.csoft.co.uk/dtd/sendsms5.xsd"
        type = (schema, "SMS-SUBMIT-PDU")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.SMS_SUBMIT_PDU_Def.schema
            TClist = [ZSI.TC.HexBinaryString(pname="DataCodingScheme", aname="_DataCodingScheme", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.HexBinaryString(pname="ProtocolIdentifier", aname="_ProtocolIdentifier", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.HexBinaryString(pname="UserDataHeader", aname="_UserDataHeader", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.HexBinaryString(pname="UserData", aname="_UserData", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._DataCodingScheme = None
                    self._ProtocolIdentifier = None
                    self._UserDataHeader = None
                    self._UserData = None
                    return
            Holder.__name__ = "SMS-SUBMIT-PDU_Holder"
            self.pyclass = Holder

    class MMSLibraryNumber_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://www.csoft.co.uk/dtd/sendsms5.xsd"
        type = (schema, "MMSLibraryNumber")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.MMSLibraryNumber_Def.schema
            TClist = [ZSI.TCnumbers.IpositiveInteger(pname="LibraryNumber", aname="_LibraryNumber", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="TextMessage", aname="_TextMessage", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._LibraryNumber = None
                    self._TextMessage = None
                    return
            Holder.__name__ = "MMSLibraryNumber_Holder"
            self.pyclass = Holder

    class MMSFileUpload_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://www.csoft.co.uk/dtd/sendsms5.xsd"
        type = (schema, "MMSFileUpload")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.MMSFileUpload_Def.schema
            TClist = [ZSI.TC.String(pname="FileName1", aname="_FileName1", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.HexBinaryString(pname="FileData1", aname="_FileData1", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="FileType1", aname="_FileType1", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="FileTitle1", aname="_FileTitle1", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="ContentType1", aname="_ContentType1", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._FileName1 = None
                    self._FileData1 = None
                    self._FileType1 = None
                    self._FileTitle1 = None
                    self._ContentType1 = None
                    return
            Holder.__name__ = "MMSFileUpload_Holder"
            self.pyclass = Holder

    class item_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://www.csoft.co.uk/dtd/sendsms5.xsd"
        type = (schema, "item")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.item_Def.schema
            TClist = [ZSI.TC.String(pname="pcdata", aname="_pcdata", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.AnyType(pname="class", aname="_class", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._pcdata = None
                    self._class = None
                    return
            Holder.__name__ = "item_Holder"
            self.pyclass = Holder

    class info_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://www.csoft.co.uk/dtd/sendsms5.xsd"
        type = (schema, "info")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.info_Def.schema
            TClist = [GTD("http://www.csoft.co.uk/dtd/sendsms5.xsd","item",lazy=False)(pname="item", aname="_item", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._item = []
                    return
            Holder.__name__ = "info_Holder"
            self.pyclass = Holder

    class indication_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://www.csoft.co.uk/dtd/sendsms5.xsd"
        type = (schema, "indication")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.indication_Def.schema
            TClist = [ZSI.TC.URI(pname="href", aname="_href", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="si-id", aname="_si_id", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TCtimes.gDateTime(pname="created", aname="_created", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCtimes.gDateTime(pname="si-expires", aname="_si_expires", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://www.csoft.co.uk/dtd/sendsms5.xsd","action",lazy=False)(pname="action", aname="_action", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="content", aname="_content", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._href = None
                    self._si_id = None
                    self._created = None
                    self._si_expires = None
                    self._action = None
                    self._content = None
                    return
            Holder.__name__ = "indication_Holder"
            self.pyclass = Holder

    class si_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://www.csoft.co.uk/dtd/sendsms5.xsd"
        type = (schema, "si")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.si_Def.schema
            TClist = [GTD("http://www.csoft.co.uk/dtd/sendsms5.xsd","indication",lazy=False)(pname="indication", aname="_indication", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://www.csoft.co.uk/dtd/sendsms5.xsd","info",lazy=False)(pname="info", aname="_info", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._indication = None
                    self._info = []
                    return
            Holder.__name__ = "si_Holder"
            self.pyclass = Holder

    class SimplePush_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://www.csoft.co.uk/dtd/sendsms5.xsd"
        type = (schema, "SimplePush")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.SimplePush_Def.schema
            TClist = [ZSI.TCnumbers.IpositiveInteger(pname="LibraryNumber", aname="_LibraryNumber", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="TextMessage", aname="_TextMessage", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._LibraryNumber = None
                    self._TextMessage = None
                    return
            Holder.__name__ = "SimplePush_Holder"
            self.pyclass = Holder

    class WAPPush_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://www.csoft.co.uk/dtd/sendsms5.xsd"
        type = (schema, "WAPPush")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.WAPPush_Def.schema
            TClist = [GTD("http://www.csoft.co.uk/dtd/sendsms5.xsd","SimplePush",lazy=False)(pname="SimplePush", aname="_SimplePush", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), GTD("http://www.csoft.co.uk/dtd/sendsms5.xsd","MMSLibraryNumber",lazy=False)(pname="LibraryNumber", aname="_LibraryNumber", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), GTD("http://www.csoft.co.uk/dtd/sendsms5.xsd","MMSFileUpload",lazy=False)(pname="FileUpload", aname="_FileUpload", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), GTD("http://www.csoft.co.uk/dtd/sendsms5.xsd","si",lazy=False)(pname="si", aname="_si", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._SimplePush = None
                    self._LibraryNumber = None
                    self._FileUpload = None
                    self._si = None
                    return
            Holder.__name__ = "WAPPush_Holder"
            self.pyclass = Holder

    class MMSNotification_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://www.csoft.co.uk/dtd/sendsms5.xsd"
        type = (schema, "MMSNotification")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.MMSNotification_Def.schema
            TClist = [GTD("http://www.csoft.co.uk/dtd/sendsms5.xsd","MMSLibraryNumber",lazy=False)(pname="LibraryNumber", aname="_LibraryNumber", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), GTD("http://www.csoft.co.uk/dtd/sendsms5.xsd","MMSFileUpload",lazy=False)(pname="FileUpload", aname="_FileUpload", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._LibraryNumber = None
                    self._FileUpload = None
                    return
            Holder.__name__ = "MMSNotification_Holder"
            self.pyclass = Holder

    class Message_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://www.csoft.co.uk/dtd/sendsms5.xsd"
        type = (schema, "Message")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.Message_Def.schema
            TClist = [ZSI.TC.String(pname="TextMessage", aname="_TextMessage", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="FlashMessage", aname="_FlashMessage", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), GTD("http://www.csoft.co.uk/dtd/sendsms5.xsd","SmartMessage",lazy=False)(pname="Ringtone", aname="_Ringtone", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), GTD("http://www.csoft.co.uk/dtd/sendsms5.xsd","SmartMessage",lazy=False)(pname="OperatorLogo", aname="_OperatorLogo", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), GTD("http://www.csoft.co.uk/dtd/sendsms5.xsd","SmartMessage",lazy=False)(pname="PictureMessage", aname="_PictureMessage", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), GTD("http://www.csoft.co.uk/dtd/sendsms5.xsd","SmartMessage",lazy=False)(pname="GroupGraphic", aname="_GroupGraphic", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), GTD("http://www.csoft.co.uk/dtd/sendsms5.xsd","SMS-SUBMIT-PDU",lazy=False)(pname="SmsSubmitPdu", aname="_SmsSubmitPdu", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), GTD("http://www.csoft.co.uk/dtd/sendsms5.xsd","WAPPush",lazy=False)(pname="WAPPush", aname="_WAPPush", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), GTD("http://www.csoft.co.uk/dtd/sendsms5.xsd","MMSNotification",lazy=False)(pname="MMSNotification", aname="_MMSNotification", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._TextMessage = None
                    self._FlashMessage = None
                    self._Ringtone = None
                    self._OperatorLogo = None
                    self._PictureMessage = None
                    self._GroupGraphic = None
                    self._SmsSubmitPdu = None
                    self._WAPPush = None
                    self._MMSNotification = None
                    return
            Holder.__name__ = "Message_Holder"
            self.pyclass = Holder

    class SendOptions_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://www.csoft.co.uk/dtd/sendsms5.xsd"
        type = (schema, "SendOptions")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.SendOptions_Def.schema
            TClist = [ZSI.TCtimes.gDateTime(pname="SendTimeAbsolute", aname="_SendTimeAbsolute", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedShort(pname="SendTimeDelay", aname="_SendTimeDelay", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), GTD("http://www.csoft.co.uk/dtd/sendsms5.xsd","DeliveryOption",lazy=False)(pname="DeliveryOption", aname="_DeliveryOption", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname="DisableRepurposing", aname="_DisableRepurposing", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname="DisableWalledGardenRule", aname="_DisableWalledGardenRule", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._SendTimeAbsolute = None
                    self._SendTimeDelay = None
                    self._DeliveryOption = None
                    self._DisableRepurposing = None
                    self._DisableWalledGardenRule = None
                    return
            Holder.__name__ = "SendOptions_Holder"
            self.pyclass = Holder

    class Recipient_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://www.csoft.co.uk/dtd/sendsms5.xsd"
        type = (schema, "Recipient")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.Recipient_Def.schema
            TClist = [ZSI.TC.String(pname="SendTo", aname="_SendTo", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="SendCc", aname="_SendCc", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="SendBcc", aname="_SendBcc", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="SendToAddressBook", aname="_SendToAddressBook", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="SendCcAddressBook", aname="_SendCcAddressBook", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="SendBccAddressBook", aname="_SendBccAddressBook", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="PhoneMake", aname="_PhoneMake", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="PhoneModel", aname="_PhoneModel", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname="MCC", aname="_MCC", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname="MNC", aname="_MNC", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://www.csoft.co.uk/dtd/sendsms5.xsd","SendOptions",lazy=False)(pname="SendOptions", aname="_SendOptions", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._SendTo = None
                    self._SendCc = None
                    self._SendBcc = None
                    self._SendToAddressBook = None
                    self._SendCcAddressBook = None
                    self._SendBccAddressBook = None
                    self._PhoneMake = None
                    self._PhoneModel = None
                    self._MCC = None
                    self._MNC = None
                    self._SendOptions = None
                    return
            Holder.__name__ = "Recipient_Holder"
            self.pyclass = Holder

    class MOMessage_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://www.csoft.co.uk/dtd/sendsms5.xsd"
        type = (schema, "MOMessage")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.MOMessage_Def.schema
            TClist = [ZSI.TC.String(pname="SendTo", aname="_SendTo", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="ReplyTo", aname="_ReplyTo", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCtimes.gDateTime(pname="Timestamp1", aname="_Timestamp1", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://www.csoft.co.uk/dtd/sendsms5.xsd","Message",lazy=False)(pname="Message", aname="_Message", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._SendTo = None
                    self._ReplyTo = None
                    self._Timestamp1 = None
                    self._Message = None
                    return
            Holder.__name__ = "MOMessage_Holder"
            self.pyclass = Holder

    class CollectedMessagesList_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://www.csoft.co.uk/dtd/sendsms5.xsd"
        type = (schema, "CollectedMessagesList")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.CollectedMessagesList_Def.schema
            TClist = [GTD("http://www.csoft.co.uk/dtd/sendsms5.xsd","MOMessage",lazy=False)(pname="item", aname="_item", minOccurs=0, maxOccurs="unbounded", nillable=True, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._item = []
                    return
            Holder.__name__ = "CollectedMessagesList_Holder"
            self.pyclass = Holder

    class SubmitMessage_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "SubmitMessage"
        schema = "http://www.csoft.co.uk/dtd/sendsms5.xsd"
        def __init__(self, **kw):
            ns = ns0.SubmitMessage_Dec.schema
            TClist = [ZSI.TC.String(pname="Username", aname="_Username", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="PIN", aname="_PIN", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), GTD("http://www.csoft.co.uk/dtd/sendsms5.xsd","Recipient",lazy=False)(pname="Recipient", aname="_Recipient", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), GTD("http://www.csoft.co.uk/dtd/sendsms5.xsd","Message",lazy=False)(pname="Message", aname="_Message", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="ReplyTo", aname="_ReplyTo", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="MessageIdentifier", aname="_MessageIdentifier", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), GTD("http://www.csoft.co.uk/dtd/sendsms5.xsd","Reserved",lazy=False)(pname="Reserved", aname="_Reserved", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.csoft.co.uk/dtd/sendsms5.xsd","SubmitMessage")
            kw["aname"] = "_SubmitMessage"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._Username = None
                    self._PIN = None
                    self._Recipient = None
                    self._Message = None
                    self._ReplyTo = None
                    self._MessageIdentifier = None
                    self._Reserved = None
                    return
            Holder.__name__ = "SubmitMessage_Holder"
            self.pyclass = Holder

    class SubmitMessageResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "SubmitMessageResponse"
        schema = "http://www.csoft.co.uk/dtd/sendsms5.xsd"
        def __init__(self, **kw):
            ns = ns0.SubmitMessageResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="MessageIdentifier", aname="_MessageIdentifier", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="Report", aname="_Report", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="Text", aname="_Text", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IpositiveInteger(pname="LibraryNumber", aname="_LibraryNumber", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://www.csoft.co.uk/dtd/sendsms5.xsd","Reserved",lazy=False)(pname="Reserved", aname="_Reserved", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.csoft.co.uk/dtd/sendsms5.xsd","SubmitMessageResponse")
            kw["aname"] = "_SubmitMessageResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._MessageIdentifier = None
                    self._Report = None
                    self._Text = None
                    self._LibraryNumber = None
                    self._Reserved = None
                    return
            Holder.__name__ = "SubmitMessageResponse_Holder"
            self.pyclass = Holder

    class SubmitDeliveryReceipt_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "SubmitDeliveryReceipt"
        schema = "http://www.csoft.co.uk/dtd/sendsms5.xsd"
        def __init__(self, **kw):
            ns = ns0.SubmitDeliveryReceipt_Dec.schema
            TClist = [ZSI.TC.String(pname="Username", aname="_Username", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="PIN", aname="_PIN", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TCtimes.gDateTime(pname="Timestamp1", aname="_Timestamp1", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="SentTo", aname="_SentTo", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="MessageIdentifier", aname="_MessageIdentifier", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname="Report", aname="_Report", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.csoft.co.uk/dtd/sendsms5.xsd","SubmitDeliveryReceipt")
            kw["aname"] = "_SubmitDeliveryReceipt"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._Username = None
                    self._PIN = None
                    self._Timestamp1 = None
                    self._SentTo = None
                    self._MessageIdentifier = None
                    self._Report = None
                    return
            Holder.__name__ = "SubmitDeliveryReceipt_Holder"
            self.pyclass = Holder

    class SubmitDeliveryReceiptResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "SubmitDeliveryReceiptResponse"
        schema = "http://www.csoft.co.uk/dtd/sendsms5.xsd"
        def __init__(self, **kw):
            ns = ns0.SubmitDeliveryReceiptResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="MessageIdentifier", aname="_MessageIdentifier", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname="Report", aname="_Report", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="Text", aname="_Text", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.csoft.co.uk/dtd/sendsms5.xsd","SubmitDeliveryReceiptResponse")
            kw["aname"] = "_SubmitDeliveryReceiptResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._MessageIdentifier = None
                    self._Report = None
                    self._Text = None
                    return
            Holder.__name__ = "SubmitDeliveryReceiptResponse_Holder"
            self.pyclass = Holder

    class DeliverMessage_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "DeliverMessage"
        schema = "http://www.csoft.co.uk/dtd/sendsms5.xsd"
        def __init__(self, **kw):
            ns = ns0.DeliverMessage_Dec.schema
            TClist = [ZSI.TC.String(pname="Username", aname="_Username", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="PIN", aname="_PIN", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), GTD("http://www.csoft.co.uk/dtd/sendsms5.xsd","Recipient",lazy=False)(pname="Recipient", aname="_Recipient", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), GTD("http://www.csoft.co.uk/dtd/sendsms5.xsd","Message",lazy=False)(pname="Message", aname="_Message", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="ReplyTo", aname="_ReplyTo", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TCtimes.gDateTime(pname="Timestamp1", aname="_Timestamp1", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.csoft.co.uk/dtd/sendsms5.xsd","DeliverMessage")
            kw["aname"] = "_DeliverMessage"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._Username = None
                    self._PIN = None
                    self._Recipient = None
                    self._Message = None
                    self._ReplyTo = None
                    self._Timestamp1 = None
                    return
            Holder.__name__ = "DeliverMessage_Holder"
            self.pyclass = Holder

    class DeliverMessageResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "DeliverMessageResponse"
        schema = "http://www.csoft.co.uk/dtd/sendsms5.xsd"
        def __init__(self, **kw):
            ns = ns0.DeliverMessageResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="MessageIdentifier", aname="_MessageIdentifier", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname="Report", aname="_Report", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="Text", aname="_Text", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.csoft.co.uk/dtd/sendsms5.xsd","DeliverMessageResponse")
            kw["aname"] = "_DeliverMessageResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._MessageIdentifier = None
                    self._Report = None
                    self._Text = None
                    return
            Holder.__name__ = "DeliverMessageResponse_Holder"
            self.pyclass = Holder

    class AvailableMessages_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "AvailableMessages"
        schema = "http://www.csoft.co.uk/dtd/sendsms5.xsd"
        def __init__(self, **kw):
            ns = ns0.AvailableMessages_Dec.schema
            TClist = [ZSI.TC.String(pname="Username", aname="_Username", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="PIN", aname="_PIN", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.csoft.co.uk/dtd/sendsms5.xsd","AvailableMessages")
            kw["aname"] = "_AvailableMessages"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._Username = None
                    self._PIN = None
                    return
            Holder.__name__ = "AvailableMessages_Holder"
            self.pyclass = Holder

    class AvailableMessagesResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "AvailableMessagesResponse"
        schema = "http://www.csoft.co.uk/dtd/sendsms5.xsd"
        def __init__(self, **kw):
            ns = ns0.AvailableMessagesResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="Messages", aname="_Messages", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://www.csoft.co.uk/dtd/sendsms5.xsd","Reserved",lazy=False)(pname="Reserved", aname="_Reserved", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.csoft.co.uk/dtd/sendsms5.xsd","AvailableMessagesResponse")
            kw["aname"] = "_AvailableMessagesResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._Messages = None
                    self._Reserved = None
                    return
            Holder.__name__ = "AvailableMessagesResponse_Holder"
            self.pyclass = Holder

    class AvailableCredit_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "AvailableCredit"
        schema = "http://www.csoft.co.uk/dtd/sendsms5.xsd"
        def __init__(self, **kw):
            ns = ns0.AvailableCredit_Dec.schema
            TClist = [ZSI.TC.String(pname="Username", aname="_Username", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="PIN", aname="_PIN", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.csoft.co.uk/dtd/sendsms5.xsd","AvailableCredit")
            kw["aname"] = "_AvailableCredit"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._Username = None
                    self._PIN = None
                    return
            Holder.__name__ = "AvailableCredit_Holder"
            self.pyclass = Holder

    class AvailableCreditResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "AvailableCreditResponse"
        schema = "http://www.csoft.co.uk/dtd/sendsms5.xsd"
        def __init__(self, **kw):
            ns = ns0.AvailableCreditResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="Currency", aname="_Currency", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="Credit", aname="_Credit", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://www.csoft.co.uk/dtd/sendsms5.xsd","Reserved",lazy=False)(pname="Reserved", aname="_Reserved", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.csoft.co.uk/dtd/sendsms5.xsd","AvailableCreditResponse")
            kw["aname"] = "_AvailableCreditResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._Currency = None
                    self._Credit = None
                    self._Reserved = None
                    return
            Holder.__name__ = "AvailableCreditResponse_Holder"
            self.pyclass = Holder

    class MobileMessengerVersion_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "MobileMessengerVersion"
        schema = "http://www.csoft.co.uk/dtd/sendsms5.xsd"
        def __init__(self, **kw):
            ns = ns0.MobileMessengerVersion_Dec.schema
            TClist = []
            kw["pname"] = ("http://www.csoft.co.uk/dtd/sendsms5.xsd","MobileMessengerVersion")
            kw["aname"] = "_MobileMessengerVersion"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "MobileMessengerVersion_Holder"
            self.pyclass = Holder

    class MobileMessengerVersionResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "MobileMessengerVersionResponse"
        schema = "http://www.csoft.co.uk/dtd/sendsms5.xsd"
        def __init__(self, **kw):
            ns = ns0.MobileMessengerVersionResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="Version", aname="_Version", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="ReleaseNotice", aname="_ReleaseNotice", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="DownloadURL", aname="_DownloadURL", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCtimes.gDateTime(pname="ReleaseDate", aname="_ReleaseDate", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.csoft.co.uk/dtd/sendsms5.xsd","MobileMessengerVersionResponse")
            kw["aname"] = "_MobileMessengerVersionResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._Version = None
                    self._ReleaseNotice = None
                    self._DownloadURL = None
                    self._ReleaseDate = None
                    return
            Holder.__name__ = "MobileMessengerVersionResponse_Holder"
            self.pyclass = Holder

    class CollectMessages_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "CollectMessages"
        schema = "http://www.csoft.co.uk/dtd/sendsms5.xsd"
        def __init__(self, **kw):
            ns = ns0.CollectMessages_Dec.schema
            TClist = [ZSI.TC.String(pname="Username", aname="_Username", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="PIN", aname="_PIN", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.csoft.co.uk/dtd/sendsms5.xsd","CollectMessages")
            kw["aname"] = "_CollectMessages"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._Username = None
                    self._PIN = None
                    return
            Holder.__name__ = "CollectMessages_Holder"
            self.pyclass = Holder

    class CollectMessagesResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "CollectMessagesResponse"
        schema = "http://www.csoft.co.uk/dtd/sendsms5.xsd"
        def __init__(self, **kw):
            ns = ns0.CollectMessagesResponse_Dec.schema
            TClist = [ZSI.TCnumbers.Iint(pname="Report", aname="_Report", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://www.csoft.co.uk/dtd/sendsms5.xsd","CollectedMessagesList",lazy=False)(pname="MessageList", aname="_MessageList", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.csoft.co.uk/dtd/sendsms5.xsd","CollectMessagesResponse")
            kw["aname"] = "_CollectMessagesResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._Report = None
                    self._MessageList = None
                    return
            Holder.__name__ = "CollectMessagesResponse_Holder"
            self.pyclass = Holder

    class PermittedReplyTo_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "PermittedReplyTo"
        schema = "http://www.csoft.co.uk/dtd/sendsms5.xsd"
        def __init__(self, **kw):
            ns = ns0.PermittedReplyTo_Dec.schema
            TClist = [ZSI.TC.String(pname="Username", aname="_Username", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="PIN", aname="_PIN", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.csoft.co.uk/dtd/sendsms5.xsd","PermittedReplyTo")
            kw["aname"] = "_PermittedReplyTo"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._Username = None
                    self._PIN = None
                    return
            Holder.__name__ = "PermittedReplyTo_Holder"
            self.pyclass = Holder

    class PermittedReplyToResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "PermittedReplyToResponse"
        schema = "http://www.csoft.co.uk/dtd/sendsms5.xsd"
        def __init__(self, **kw):
            ns = ns0.PermittedReplyToResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="PermittedReplyTo", aname="_PermittedReplyTo", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://www.csoft.co.uk/dtd/sendsms5.xsd","Reserved",lazy=False)(pname="Reserved", aname="_Reserved", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.csoft.co.uk/dtd/sendsms5.xsd","PermittedReplyToResponse")
            kw["aname"] = "_PermittedReplyToResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._PermittedReplyTo = None
                    self._Reserved = None
                    return
            Holder.__name__ = "PermittedReplyToResponse_Holder"
            self.pyclass = Holder

# end class ns0 (tns: http://www.csoft.co.uk/dtd/sendsms5.xsd)
