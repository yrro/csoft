################################################## 
# Service_services.py 
# generated by ZSI.generate.wsdl2python
##################################################


from Service_services_types import *
import urlparse, types
from ZSI.TCcompound import ComplexType, Struct
from ZSI import client
import ZSI
from ZSI.generate.pyclass import pyclass_type

# Locator
class ServiceLocator:
    ServicePortType_address = "http://www.csoft.co.uk/sendsms5"
    def getServicePortTypeAddress(self):
        return ServiceLocator.ServicePortType_address
    def getServicePortType(self, url=None, **kw):
        return ServiceSOAP(url or ServiceLocator.ServicePortType_address, **kw)

# Methods
class ServiceSOAP:
    def __init__(self, url, **kw):
        kw.setdefault("readerclass", None)
        kw.setdefault("writerclass", None)
        # no resource properties
        self.binding = client.Binding(url=url, **kw)
        # no ws-addressing

    # op: SubmitMessage
    def SubmitMessage(self, request):
        if isinstance(request, SubmitMessageRequest) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(SubmitMessageResponse.typecode)
        return response

    # op: SubmitDeliveryReceipt
    def SubmitDeliveryReceipt(self, request):
        if isinstance(request, SubmitDeliveryReceiptRequest) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(SubmitDeliveryReceiptResponse.typecode)
        return response

    # op: DeliverMessage
    def DeliverMessage(self, request):
        if isinstance(request, DeliverMessageRequest) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(DeliverMessageResponse.typecode)
        return response

    # op: AvailableMessages
    def AvailableMessages(self, request):
        if isinstance(request, AvailableMessagesRequest) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(AvailableMessagesResponse.typecode)
        return response

    # op: AvailableCredit
    def AvailableCredit(self, request):
        if isinstance(request, AvailableCreditRequest) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(AvailableCreditResponse.typecode)
        return response

    # op: MobileMessengerVersion
    def MobileMessengerVersion(self, request):
        if isinstance(request, MobileMessengerVersionRequest) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(MobileMessengerVersionResponse.typecode)
        return response

    # op: CollectMessages
    def CollectMessages(self, request):
        if isinstance(request, CollectMessagesRequest) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(CollectMessagesResponse.typecode)
        return response

    # op: PermittedReplyTo
    def PermittedReplyTo(self, request):
        if isinstance(request, PermittedReplyToRequest) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(PermittedReplyToResponse.typecode)
        return response

SubmitMessageRequest = ns0.SubmitMessage_Dec().pyclass

SubmitMessageResponse = ns0.SubmitMessageResponse_Dec().pyclass

SubmitDeliveryReceiptRequest = ns0.SubmitDeliveryReceipt_Dec().pyclass

SubmitDeliveryReceiptResponse = ns0.SubmitDeliveryReceiptResponse_Dec().pyclass

DeliverMessageRequest = ns0.DeliverMessage_Dec().pyclass

DeliverMessageResponse = ns0.DeliverMessageResponse_Dec().pyclass

AvailableMessagesRequest = ns0.AvailableMessages_Dec().pyclass

AvailableMessagesResponse = ns0.AvailableMessagesResponse_Dec().pyclass

AvailableCreditRequest = ns0.AvailableCredit_Dec().pyclass

AvailableCreditResponse = ns0.AvailableCreditResponse_Dec().pyclass

MobileMessengerVersionRequest = ns0.MobileMessengerVersion_Dec().pyclass

MobileMessengerVersionResponse = ns0.MobileMessengerVersionResponse_Dec().pyclass

CollectMessagesRequest = ns0.CollectMessages_Dec().pyclass

CollectMessagesResponse = ns0.CollectMessagesResponse_Dec().pyclass

PermittedReplyToRequest = ns0.PermittedReplyTo_Dec().pyclass

PermittedReplyToResponse = ns0.PermittedReplyToResponse_Dec().pyclass
